Index: FFmpeg/libavutil/hwcontext_vulkan.c
===================================================================
--- FFmpeg.orig/libavutil/hwcontext_vulkan.c
+++ FFmpeg/libavutil/hwcontext_vulkan.c
@@ -64,6 +64,13 @@
 #if HAVE_LINUX_DMA_BUF_H
 #include <sys/ioctl.h>
 #include <linux/dma-buf.h>
+#if 0 // ndef DMA_BUF_IOCTL_EXPORT_SYNC_FILE
+#define DMA_BUF_IOCTL_EXPORT_SYNC_FILE _IOWR(DMA_BUF_BASE, 2, struct dma_buf_export_sync_file)
+struct dma_buf_export_sync_file {
+  uint32_t flags;
+  int32_t fd;
+};
+#endif
 #endif
 
 #if CONFIG_CUDA
@@ -1711,6 +1718,7 @@ static int vulkan_device_has_rebar(AVHWD
 
 static int vulkan_device_create_internal(AVHWDeviceContext *ctx,
                                          VulkanDeviceSelection *dev_select,
+                                         int use_linear_images,
                                          int disable_multiplane,
                                          AVDictionary *opts, int flags)
 {
@@ -1778,10 +1786,14 @@ static int vulkan_device_create_internal
         goto end;
     }
 
-    /* Tiled images setting, use them by default */
-    opt_d = av_dict_get(opts, "linear_images", NULL, 0);
-    if (opt_d)
-        p->use_linear_images = strtol(opt_d->value, NULL, 10);
+    /* Tiled images setting, use them by default.
+     * The use_linear_images argument takes precedent over the option */
+    p->use_linear_images = use_linear_images;
+    if (!p->use_linear_images) {
+        opt_d = av_dict_get(opts, "linear_images", NULL, 0);
+        if (opt_d)
+            p->use_linear_images = strtol(opt_d->value, NULL, 10);
+    }
 
     /* Limit queues to a given number if needed */
     opt_d = av_dict_get(opts, "limit_queues", NULL, 0);
@@ -2083,7 +2095,7 @@ static int vulkan_device_create(AVHWDevi
         }
     }
 
-    return vulkan_device_create_internal(ctx, &dev_select, 0, opts, flags);
+    return vulkan_device_create_internal(ctx, &dev_select, 0, 0, opts, flags);
 }
 
 static int vulkan_device_derive(AVHWDeviceContext *ctx,
@@ -2107,6 +2119,7 @@ static int vulkan_device_derive(AVHWDevi
         };
 #endif
         const char *vendor;
+        int use_linear_images = 0;
 
 #if VA_CHECK_VERSION(1, 15, 0)
         vas = vaGetDisplayAttributes(dpy, &attr, 1);
@@ -2121,11 +2134,14 @@ static int vulkan_device_derive(AVHWDevi
                 return AVERROR_EXTERNAL;
             }
 
-            if (strstr(vendor, "AMD"))
+            if (strstr(vendor, "AMD")) {
                 dev_select.vendor_id = 0x1002;
+                use_linear_images = 1;
+            }
         }
 
-        return vulkan_device_create_internal(ctx, &dev_select, 0, opts, flags);
+        /* AMD VA-API encoders require linear contiguous (multiplane) surface */
+        return vulkan_device_create_internal(ctx, &dev_select, use_linear_images, 0, opts, flags);
     }
 #endif
 #if CONFIG_LIBDRM
@@ -2134,6 +2150,7 @@ static int vulkan_device_derive(AVHWDevi
         struct stat drm_node_info;
         drmDevice *drm_dev_info;
         AVDRMDeviceContext *src_hwctx = src_ctx->hwctx;
+        int use_linear_images = 0;
 
         err = fstat(src_hwctx->fd, &drm_node_info);
         if (err) {
@@ -2153,12 +2170,15 @@ static int vulkan_device_derive(AVHWDevi
             return AVERROR_EXTERNAL;
         }
 
-        if (drm_dev_info->bustype == DRM_BUS_PCI)
+        if (drm_dev_info->bustype == DRM_BUS_PCI) {
             dev_select.pci_device = drm_dev_info->deviceinfo.pci->device_id;
+            use_linear_images = drm_dev_info->deviceinfo.pci->vendor_id == 0x1002;
+        }
 
         drmFreeDevice(&drm_dev_info);
 
-        return vulkan_device_create_internal(ctx, &dev_select, 0, opts, flags);
+        /* AMD VA-API encoders require linear contiguous (multiplane) surface */
+        return vulkan_device_create_internal(ctx, &dev_select, use_linear_images, 0, opts, flags);
     }
 #endif
 #if CONFIG_CUDA
@@ -2181,7 +2201,7 @@ static int vulkan_device_derive(AVHWDevi
          * CUDA is not able to import multiplane images, so always derive a
          * Vulkan device with multiplane disabled.
          */
-        return vulkan_device_create_internal(ctx, &dev_select, 1, opts, flags);
+        return vulkan_device_create_internal(ctx, &dev_select, 0, 1, opts, flags);
     }
 #endif
     default:
@@ -3151,6 +3171,7 @@ static int vulkan_map_from_drm_frame_des
     const AVDRMFrameDescriptor *desc = (AVDRMFrameDescriptor *)src->data[0];
     VkBindImageMemoryInfo bind_info[AV_DRM_MAX_PLANES];
     VkBindImagePlaneMemoryInfo plane_info[AV_DRM_MAX_PLANES];
+    const int has_modifiers = !!(p->vkctx.extensions & FF_VK_EXT_DRM_MODIFIER_FLAGS);
 
     for (int i = 0; i < desc->nb_layers; i++) {
         if (drm_to_vulkan_fmt(desc->layers[i].format) == VK_FORMAT_UNDEFINED) {
@@ -3160,13 +3181,21 @@ static int vulkan_map_from_drm_frame_des
         }
     }
 
+    if (!has_modifiers &&
+        desc->objects[0].format_modifier != DRM_FORMAT_MOD_INVALID &&
+        desc->objects[0].format_modifier != DRM_FORMAT_MOD_LINEAR) {
+        av_log(ctx, AV_LOG_ERROR, "The driver can only import DRM frame with invalid/linear modifier!\n");
+        err = AVERROR_EXTERNAL;
+        goto fail;
+    }
+
     if (!(f = av_vk_frame_alloc())) {
         av_log(ctx, AV_LOG_ERROR, "Unable to allocate memory for AVVkFrame!\n");
         err = AVERROR(ENOMEM);
         goto fail;
     }
 
-    f->tiling = VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT;
+    f->tiling = has_modifiers ? VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT : VK_IMAGE_TILING_LINEAR;
 
     for (int i = 0; i < desc->nb_layers; i++) {
         const int planes = desc->layers[i].nb_planes;
@@ -3204,7 +3233,7 @@ static int vulkan_map_from_drm_frame_des
             .mipLevels             = 1,
             .arrayLayers           = 1,
             .flags                 = 0x0,
-            .tiling                = VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT,
+            .tiling                = f->tiling,
             .initialLayout         = VK_IMAGE_LAYOUT_UNDEFINED, /* specs say so */
             .usage                 = 0x0, /* filled in below */
             .samples               = VK_SAMPLE_COUNT_1_BIT,
@@ -3245,7 +3274,7 @@ static int vulkan_map_from_drm_frame_des
 
         fmt_props = (VkPhysicalDeviceImageFormatInfo2) {
             .sType  = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
-            .pNext  = &props_ext,
+            .pNext  = has_modifiers ? &props_ext : NULL,
             .format = create_info.format,
             .type   = create_info.imageType,
             .tiling = create_info.tiling,
@@ -3420,7 +3449,7 @@ static int vulkan_map_from_drm_frame_syn
 
     const AVDRMFrameDescriptor *desc = (AVDRMFrameDescriptor *)src->data[0];
 
-#ifdef DMA_BUF_IOCTL_EXPORT_SYNC_FILE
+#if 0 // def DMA_BUF_IOCTL_EXPORT_SYNC_FILE
     if (p->vkctx.extensions & FF_VK_EXT_EXTERNAL_FD_SEM) {
         VkCommandBuffer cmd_buf;
         FFVkExecContext *exec;
@@ -3446,8 +3475,10 @@ static int vulkan_map_from_drm_frame_syn
             if (ioctl(desc->objects[i].fd, DMA_BUF_IOCTL_EXPORT_SYNC_FILE,
                       &implicit_fd_info)) {
                 err = AVERROR(errno);
-                av_log(hwctx, AV_LOG_ERROR, "Failed to retrieve implicit DRM sync file: %s\n",
+                av_log(hwctx, i ? AV_LOG_ERROR : AV_LOG_DEBUG, "Failed to retrieve implicit DRM sync file: %s\n",
                        av_err2str(err));
+                if (i == 0) /* Bail out from the plane0 if ioctl failed */
+                    goto fallback;
                 for (; i >= 0; i--)
                     vk->DestroySemaphore(hwctx->act_dev, drm_sync_sem[i], hwctx->alloc);
                 return err;
@@ -3523,10 +3554,12 @@ static int vulkan_map_from_drm_frame_syn
     } else
 #endif
     {
-        AVVkFrame *f = (AVVkFrame *)dst->data[0];
-        av_log(hwctx, AV_LOG_WARNING, "No support for synchronization when importing DMA-BUFs, "
-                                      "image may be corrupted.\n");
-        err = prepare_frame(hwfc, &fp->compute_exec, f, PREP_MODE_EXTERNAL_IMPORT);
+#if 0 // def DMA_BUF_IOCTL_EXPORT_SYNC_FILE
+fallback:
+#endif
+        av_log(hwctx, AV_LOG_DEBUG, "No support for synchronization when importing DMA-BUFs, "
+                                    "image may be corrupted.\n");
+        err = prepare_frame(hwfc, &fp->compute_exec, (AVVkFrame *)dst->data[0], PREP_MODE_EXTERNAL_IMPORT);
         if (err)
             return err;
     }
@@ -3925,22 +3958,14 @@ fail:
 static int vulkan_map_to(AVHWFramesContext *hwfc, AVFrame *dst,
                          const AVFrame *src, int flags)
 {
-    av_unused VulkanDevicePriv *p = hwfc->device_ctx->hwctx;
-
     switch (src->format) {
 #if CONFIG_LIBDRM
 #if CONFIG_VAAPI
     case AV_PIX_FMT_VAAPI:
-        if (p->vkctx.extensions & FF_VK_EXT_DRM_MODIFIER_FLAGS)
-            return vulkan_map_from_vaapi(hwfc, dst, src, flags);
-        else
-            return AVERROR(ENOSYS);
+        return vulkan_map_from_vaapi(hwfc, dst, src, flags);
 #endif
     case AV_PIX_FMT_DRM_PRIME:
-        if (p->vkctx.extensions & FF_VK_EXT_DRM_MODIFIER_FLAGS)
-            return vulkan_map_from_drm(hwfc, dst, src, flags);
-        else
-            return AVERROR(ENOSYS);
+        return vulkan_map_from_drm(hwfc, dst, src, flags);
 #endif
     default:
         return AVERROR(ENOSYS);
@@ -3993,13 +4018,14 @@ static int vulkan_map_to_drm(AVHWFramesC
     FFVulkanFunctions *vk = &p->vkctx.vkfn;
     VulkanFramesPriv *fp = hwfc->hwctx;
     const int planes = av_pix_fmt_count_planes(hwfc->sw_format);
+    const int has_modifiers = !!(p->vkctx.extensions & FF_VK_EXT_DRM_MODIFIER_FLAGS);
     VkImageDrmFormatModifierPropertiesEXT drm_mod = {
         .sType = VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT,
     };
     VkSemaphoreWaitInfo wait_info = {
         .sType          = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
         .flags          = 0x0,
-        .semaphoreCount = planes,
+        .semaphoreCount = p->disable_multiplane ? planes : 1,
     };
 
     AVDRMFrameDescriptor *drm_desc = av_mallocz(sizeof(*drm_desc));
@@ -4020,10 +4046,16 @@ static int vulkan_map_to_drm(AVHWFramesC
     if (err < 0)
         goto end;
 
-    ret = vk->GetImageDrmFormatModifierPropertiesEXT(hwctx->act_dev, f->img[0],
-                                                     &drm_mod);
-    if (ret != VK_SUCCESS) {
-        av_log(hwfc, AV_LOG_ERROR, "Failed to retrieve DRM format modifier!\n");
+    if (has_modifiers) {
+        ret = vk->GetImageDrmFormatModifierPropertiesEXT(hwctx->act_dev, f->img[0],
+                                                         &drm_mod);
+        if (ret != VK_SUCCESS) {
+            av_log(hwfc, AV_LOG_ERROR, "Failed to retrieve DRM format modifier!\n");
+            err = AVERROR_EXTERNAL;
+            goto end;
+        }
+    } else if (f->tiling != VK_IMAGE_TILING_LINEAR) {
+        av_log(hwfc, AV_LOG_ERROR, "The driver can only export linear images to DRM frame!\n");
         err = AVERROR_EXTERNAL;
         goto end;
     }
@@ -4045,7 +4077,7 @@ static int vulkan_map_to_drm(AVHWFramesC
 
         drm_desc->nb_objects++;
         drm_desc->objects[i].size = f->size[i];
-        drm_desc->objects[i].format_modifier = drm_mod.drmFormatModifier;
+        drm_desc->objects[i].format_modifier = has_modifiers ? drm_mod.drmFormatModifier : 0x0;
     }
 
     drm_desc->nb_layers = planes;
@@ -4069,7 +4101,7 @@ static int vulkan_map_to_drm(AVHWFramesC
 
             drm_desc->layers[i].planes[j].object_index = FFMIN(i, drm_desc->nb_objects - 1);
 
-            vk->GetImageSubresourceLayout(hwctx->act_dev, f->img[i], &sub, &layout);
+            vk->GetImageSubresourceLayout(hwctx->act_dev, f->img[p->disable_multiplane ? i : 0], &sub, &layout);
             drm_desc->layers[i].planes[j].offset = layout.offset;
             drm_desc->layers[i].planes[j].pitch  = layout.rowPitch;
         }
@@ -4130,21 +4162,13 @@ fail:
 static int vulkan_map_from(AVHWFramesContext *hwfc, AVFrame *dst,
                            const AVFrame *src, int flags)
 {
-    av_unused VulkanDevicePriv *p = hwfc->device_ctx->hwctx;
-
     switch (dst->format) {
 #if CONFIG_LIBDRM
     case AV_PIX_FMT_DRM_PRIME:
-        if (p->vkctx.extensions & FF_VK_EXT_DRM_MODIFIER_FLAGS)
-            return vulkan_map_to_drm(hwfc, dst, src, flags);
-        else
-            return AVERROR(ENOSYS);
+        return vulkan_map_to_drm(hwfc, dst, src, flags);
 #if CONFIG_VAAPI
     case AV_PIX_FMT_VAAPI:
-        if (p->vkctx.extensions & FF_VK_EXT_DRM_MODIFIER_FLAGS)
-            return vulkan_map_to_vaapi(hwfc, dst, src, flags);
-        else
-            return AVERROR(ENOSYS);
+        return vulkan_map_to_vaapi(hwfc, dst, src, flags);
 #endif
 #endif
     default:
