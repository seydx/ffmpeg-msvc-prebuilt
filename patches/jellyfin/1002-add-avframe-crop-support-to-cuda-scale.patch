diff --git a/libavfilter/vf_scale_cuda.c b/libavfilter/vf_scale_cuda.c
index 571e019e..5b178bf1 100644
--- a/libavfilter/vf_scale_cuda.c
+++ b/libavfilter/vf_scale_cuda.c
@@ -490,7 +490,8 @@ fail:
 
 static int call_resize_kernel(AVFilterContext *ctx, CUfunction func,
                               CUtexObject src_tex[4], int src_width, int src_height,
-                              AVFrame *out_frame, int dst_width, int dst_height, int dst_pitch)
+                              AVFrame *out_frame, int dst_width, int dst_height, int dst_pitch,
+                              int src_left, int src_top)
 {
     CUDAScaleContext *s = ctx->priv;
     CudaFunctions *cu = s->hwctx->internal->cuda_dl;
@@ -508,7 +509,8 @@ static int call_resize_kernel(AVFilterContext *ctx, CUfunction func,
         &dst_devptr[0], &dst_devptr[1], &dst_devptr[2], &dst_devptr[3],
         &dst_width, &dst_height, &dst_pitch,
         &src_width, &src_height, &s->param,
-        &s->dither_tex, &dither_size, &dither_quantization
+        &s->dither_tex, &dither_size, &dither_quantization,
+        &src_left, &src_top
     };
 
     return CHECK_CU(cu->cuLaunchKernel(func,
@@ -523,9 +525,22 @@ static int scalecuda_resize(AVFilterContext *ctx,
     CudaFunctions *cu = s->hwctx->internal->cuda_dl;
     CUcontext dummy, cuda_ctx = s->hwctx->cuda_ctx;
     int i, ret;
+    int src_left = 0, src_top = 0;
+    int src_width, src_height;
 
     CUtexObject tex[4] = { 0, 0, 0, 0 };
 
+    // Apply crop from AVFrame crop fields if present
+    if (in->crop_left || in->crop_top || in->crop_right || in->crop_bottom) {
+        src_left = in->crop_left;
+        src_top = in->crop_top;
+        src_width = in->width - in->crop_left - in->crop_right;
+        src_height = in->height - in->crop_top - in->crop_bottom;
+    } else {
+        src_width = in->width;
+        src_height = in->height;
+    }
+
     ret = CHECK_CU(cu->cuCtxPushCurrent(cuda_ctx));
     if (ret < 0)
         return ret;
@@ -564,20 +579,23 @@ static int scalecuda_resize(AVFilterContext *ctx,
 
     // scale primary plane(s). Usually Y (and A), or single plane of RGB frames.
     ret = call_resize_kernel(ctx, s->cu_func,
-                             tex, in->width, in->height,
-                             out, out->width, out->height, out->linesize[0]);
+                             tex, src_width, src_height,
+                             out, out->width, out->height, out->linesize[0],
+                             src_left, src_top);
     if (ret < 0)
         goto exit;
 
     if (s->out_planes > 1) {
         // scale UV plane. Scale function sets both U and V plane, or singular interleaved plane.
         ret = call_resize_kernel(ctx, s->cu_func_uv, tex,
-                                 AV_CEIL_RSHIFT(in->width, s->in_desc->log2_chroma_w),
-                                 AV_CEIL_RSHIFT(in->height, s->in_desc->log2_chroma_h),
+                                 AV_CEIL_RSHIFT(src_width, s->in_desc->log2_chroma_w),
+                                 AV_CEIL_RSHIFT(src_height, s->in_desc->log2_chroma_h),
                                  out,
                                  AV_CEIL_RSHIFT(out->width, s->out_desc->log2_chroma_w),
                                  AV_CEIL_RSHIFT(out->height, s->out_desc->log2_chroma_h),
-                                 out->linesize[1]);
+                                 out->linesize[1],
+                                 AV_CEIL_RSHIFT(src_left, s->in_desc->log2_chroma_w),
+                                 AV_CEIL_RSHIFT(src_top, s->in_desc->log2_chroma_h));
         if (ret < 0)
             goto exit;
     }
diff --git a/libavfilter/vf_scale_cuda.cu b/libavfilter/vf_scale_cuda.cu
index ca2ae5fd..a4de7367 100644
--- a/libavfilter/vf_scale_cuda.cu
+++ b/libavfilter/vf_scale_cuda.cu
@@ -27,7 +27,8 @@ template<typename T>
 using subsample_function_t = T (*)(cudaTextureObject_t tex, int xo, int yo,
                                    int dst_width, int dst_height,
                                    int src_width, int src_height,
-                                   int bit_depth, float param);
+                                   int bit_depth, float param,
+                                   int src_left, int src_top);
 
 // --- DITHERING ---
 
@@ -79,13 +80,15 @@ static inline __device__ ushort conv_16to10(ushort in)
                                     int dst_width, int dst_height, int dst_pitch,              \
                                     int src_width, int src_height, float param,                \
                                     cudaTextureObject_t dither_tex,                            \
-                                    float dither_size, float dither_quantization)
+                                    float dither_size, float dither_quantization,              \
+                                    int src_left, int src_top)
 
 #define SUB_F(m, plane) \
     subsample_func_##m(src_tex[plane], xo, yo, \
                        dst_width, dst_height,  \
                        src_width, src_height,  \
-                       in_bit_depth, param)
+                       in_bit_depth, param,    \
+                       src_left, src_top)
 
 // FFmpeg passes pitch in bytes, CUDA uses potentially larger types
 #define FIXED_PITCH \
@@ -1112,12 +1115,13 @@ __device__ static inline T Subsample_Nearest(cudaTextureObject_t tex,
                                              int xo, int yo,
                                              int dst_width, int dst_height,
                                              int src_width, int src_height,
-                                             int bit_depth, float param)
+                                             int bit_depth, float param,
+                                             int src_left, int src_top)
 {
     float hscale = (float)src_width / (float)dst_width;
     float vscale = (float)src_height / (float)dst_height;
-    float xi = (xo + 0.5f) * hscale;
-    float yi = (yo + 0.5f) * vscale;
+    float xi = (xo + 0.5f) * hscale + src_left;
+    float yi = (yo + 0.5f) * vscale + src_top;
 
     return tex2D<T>(tex, xi, yi);
 }
@@ -1127,12 +1131,13 @@ __device__ static inline T Subsample_Bilinear(cudaTextureObject_t tex,
                                               int xo, int yo,
                                               int dst_width, int dst_height,
                                               int src_width, int src_height,
-                                              int bit_depth, float param)
+                                              int bit_depth, float param,
+                                              int src_left, int src_top)
 {
     float hscale = (float)src_width / (float)dst_width;
     float vscale = (float)src_height / (float)dst_height;
-    float xi = (xo + 0.5f) * hscale;
-    float yi = (yo + 0.5f) * vscale;
+    float xi = (xo + 0.5f) * hscale + src_left;
+    float yi = (yo + 0.5f) * vscale + src_top;
     // 3-tap filter weights are {wh,1.0,wh} and {wv,1.0,wv}
     float wh = min(max(0.5f * (hscale - 1.0f), 0.0f), 1.0f);
     float wv = min(max(0.5f * (vscale - 1.0f), 0.0f), 1.0f);
@@ -1158,12 +1163,13 @@ __device__ static inline T Subsample_Bicubic(cudaTextureObject_t tex,
                                              int xo, int yo,
                                              int dst_width, int dst_height,
                                              int src_width, int src_height,
-                                             int bit_depth, float param)
+                                             int bit_depth, float param,
+                                             int src_left, int src_top)
 {
     float hscale = (float)src_width / (float)dst_width;
     float vscale = (float)src_height / (float)dst_height;
-    float xi = xo * hscale + 0.5f * hscale - 0.5f; // avoid (x - v + v = x)
-    float yi = yo * hscale + 0.5f * vscale - 0.5f;
+    float xi = xo * hscale + 0.5f * hscale - 0.5f + src_left; // avoid (x - v + v = x)
+    float yi = yo * hscale + 0.5f * vscale - 0.5f + src_top;
     float px = floor(xi);
     float py = floor(yi);
     float fx = xi - px;
@@ -1197,7 +1203,8 @@ __device__ static inline T Subsample_Bicubic(cudaTextureObject_t tex,
     int dst_width, int dst_height, int dst_pitch,                 \
     int src_width, int src_height, float param,                   \
     cudaTextureObject_t dither_tex,                               \
-    float dither_size, float dither_quantization
+    float dither_size, float dither_quantization,                 \
+    int src_left, int src_top
 
 #define SUBSAMPLE(Convert, T) \
     cudaTextureObject_t src_tex[4] =                    \
@@ -1211,7 +1218,8 @@ __device__ static inline T Subsample_Bicubic(cudaTextureObject_t tex,
         dst_width, dst_height, dst_pitch,               \
         src_width, src_height, param,                   \
         dither_tex,                                     \
-        dither_size, dither_quantization);
+        dither_size, dither_quantization,               \
+        src_left, src_top);
 
 extern "C" {
 
