Index: FFmpeg/libavfilter/opencl/scale.cl
===================================================================
--- FFmpeg.orig/libavfilter/opencl/scale.cl
+++ FFmpeg/libavfilter/opencl/scale.cl
@@ -145,12 +145,15 @@ __kernel void scale_builtin(__write_only
   #ifdef ENABLE_DITHER
                             __read_only  image2d_t dither,
   #endif
-                                         int2      src_sz)
+                                         int2      src_sz,
+                                         int       crop_x,
+                                         int       crop_y)
 {
     int2 dst_pos = { get_global_id(0), get_global_id(1) };
     float2 dst_sz = { get_global_size(0), get_global_size(1) };
 
     float2 src_pos = (convert_float2(dst_pos) + 0.5f) * convert_float2(src_sz) * native_recip(dst_sz);
+    src_pos += (float2)(crop_x, crop_y);
     src_pos = clamp(src_pos, 0.0f, convert_float2(src_sz - 1));
 
   #if defined(ENABLE_DITHER) && !defined(CONV)
@@ -180,12 +183,15 @@ __kernel void scale_builtin_uv(__write_o
   #if defined(NON_SEMI_PLANAR_IN) && !defined(CONV)
                                __read_only  image2d_t src3,
   #endif
-                                            int2      src_sz)
+                                            int2      src_sz,
+                                            int       crop_x,
+                                            int       crop_y)
 {
     int2 dst_pos = { get_global_id(0), get_global_id(1) };
     float2 dst_sz = { get_global_size(0), get_global_size(1) };
 
     float2 src_pos = (convert_float2(dst_pos) + 0.5f) * convert_float2(src_sz) * native_recip(dst_sz);
+    src_pos += (float2)(crop_x, crop_y);
     src_pos = clamp(src_pos, 0.0f, convert_float2(src_sz - 1));
 
   #if defined(NON_SEMI_PLANAR_IN) && !defined(CONV)
@@ -221,12 +227,15 @@ __kernel void scale(__write_only image2d
   #endif
                     __constant   float    *cx,
                     __constant   float    *cy,
-                                 int2      src_sz)
+                                 int2      src_sz,
+                                 int       crop_x,
+                                 int       crop_y)
 {
     int2 dst_pos = { get_global_id(0), get_global_id(1) };
     float2 dst_sz = { get_global_size(0), get_global_size(1) };
 
     float2 src_coord = (convert_float2(dst_pos) + 0.5f) * convert_float2(src_sz) * native_recip(dst_sz);
+    src_coord += (float2)(crop_x, crop_y);
     int2 src_pos = convert_int2(floor(src_coord - 0.5f));
 
   #if defined(ENABLE_DITHER) && !defined(CONV)
@@ -270,12 +279,15 @@ __kernel void scale_uv(__write_only imag
   #endif
                        __constant   float    *cx,
                        __constant   float    *cy,
-                                    int2      src_sz)
+                                    int2      src_sz,
+                                    int       crop_x,
+                                    int       crop_y)
 {
     int2 dst_pos = { get_global_id(0), get_global_id(1) };
     float2 dst_sz = { get_global_size(0), get_global_size(1) };
 
     float2 src_coord = (convert_float2(dst_pos) + 0.5f) * convert_float2(src_sz) * native_recip(dst_sz);
+    src_coord += (float2)(crop_x, crop_y);
     int2 src_pos = convert_int2(floor(src_coord - 0.5f));
 
     int i, j;
Index: FFmpeg/libavfilter/vf_scale_opencl.c
===================================================================
--- FFmpeg.orig/libavfilter/vf_scale_opencl.c
+++ FFmpeg/libavfilter/vf_scale_opencl.c
@@ -87,6 +87,8 @@ typedef struct ScaleOpenCLContext {
     char *w_expr,  *h_expr;
     int   dst_w,    dst_h;
     int   src_w,    src_h;
+    int   crop_x,   crop_y;
+    int   crop_w,   crop_h;
     int   passthrough;
     int   algorithm;
     int   force_original_aspect_ratio;
@@ -586,8 +588,16 @@ static int scale_opencl_config_output(AV
         ((int64_t)ctx->dst_w * inlink->h) > INT_MAX)
         av_log(ctx, AV_LOG_ERROR, "Rescaled value for width or height is too big.\n");
 
-    ctx->src_w = inlink->w;
-    ctx->src_h = inlink->h;
+    // Apply crop if specified
+    if (ctx->crop_w > 0 && ctx->crop_h > 0) {
+        ctx->src_w = ctx->crop_w;
+        ctx->src_h = ctx->crop_h;
+    } else {
+        ctx->src_w = inlink->w;
+        ctx->src_h = inlink->h;
+        ctx->crop_x = 0;
+        ctx->crop_y = 0;
+    }
     ctx->ocf.output_width  = ctx->dst_w;
     ctx->ocf.output_height = ctx->dst_h;
 
@@ -707,8 +717,14 @@ static int scale_opencl_filter_frame_int
         src_size.s[1] = ctx->src_h;
         uv_size.s[0] = src_size.s[0] / x_subsample;
         uv_size.s[1] = src_size.s[1] / y_subsample;
+        cl_int crop_x_uv = ctx->crop_x / x_subsample;
+        cl_int crop_y_uv = ctx->crop_y / y_subsample;
         CL_SET_KERNEL_ARG(ctx->kernel, idx_arg2++, cl_int2, &src_size);
         CL_SET_KERNEL_ARG(ctx->kernel_uv, idx_arg1++, cl_int2, &uv_size);
+        CL_SET_KERNEL_ARG(ctx->kernel, idx_arg2++, cl_int, &ctx->crop_x);
+        CL_SET_KERNEL_ARG(ctx->kernel, idx_arg2++, cl_int, &ctx->crop_y);
+        CL_SET_KERNEL_ARG(ctx->kernel_uv, idx_arg1++, cl_int, &crop_x_uv);
+        CL_SET_KERNEL_ARG(ctx->kernel_uv, idx_arg1++, cl_int, &crop_y_uv);
 
         // scale, scale_builtin
         global_work[0] = output->width;
@@ -893,6 +909,10 @@ static const AVOption scale_opencl_optio
         { "decrease",      NULL,              0, AV_OPT_TYPE_CONST, {.i64 = 1 }, 0, 0, FLAGS, .unit = "force_oar" },
         { "increase",      NULL,              0, AV_OPT_TYPE_CONST, {.i64 = 2 }, 0, 0, FLAGS, .unit = "force_oar" },
     { "force_divisible_by", "Enforce that the output resolution is divisible by a defined integer when force_original_aspect_ratio is used", OFFSET(force_divisible_by), AV_OPT_TYPE_INT, { .i64 = 2 }, 1, 256, FLAGS },
+    { "cx",      "Crop offset X",                               OFFSET(crop_x),   AV_OPT_TYPE_INT,    { .i64 = 0 }, 0, INT_MAX, FLAGS },
+    { "cy",      "Crop offset Y",                               OFFSET(crop_y),   AV_OPT_TYPE_INT,    { .i64 = 0 }, 0, INT_MAX, FLAGS },
+    { "cw",      "Crop width",                                  OFFSET(crop_w),   AV_OPT_TYPE_INT,    { .i64 = 0 }, 0, INT_MAX, FLAGS },
+    { "ch",      "Crop height",                                 OFFSET(crop_h),   AV_OPT_TYPE_INT,    { .i64 = 0 }, 0, INT_MAX, FLAGS },
     { NULL }
 };
 
